---
title: "Package olympicsWeather"
subtitle: "Prévisions météorologiques des sites olympiques"
date: "2024-06"
categories: [Package]
---

Le package `olympicsWeather` offre une solution simple et interactive pour accéder aux prévisions météorologiques des sites olympiques. Utilisant des graphiques interactifs, il permet aux utilisateurs d'explorer en profondeur les données météorologiques.

![](chat-leur.png)<br> <small>*© Illustration AdobeStock* </small>

## Caractéristiques

-   **Graphiques interactifs** : Grâce à `plotly`, le package produit des visualisations interactives des données météorologiques, améliorant ainsi l'expérience utilisateur par une exploration dynamique des prévisions.

-   **Facilité d'utilisation** : Les prévisions sont accessibles via des coordonnées GPS ou des noms de lieux, facilitant l'accès aux données météorologiques sans expertise technique spécifique.

-   **Intégration de packages R** : `olympicsWeather` s'appuie sur des packages tels que `httr` pour les requêtes web, `jsonlite` pour le traitement JSON, et `tibble` pour la manipulation de données, optimisant ainsi le processus d'analyse.

## Installation

Le package `olympicsWeather` est disponible sur GitHub et peut être installé en utilisant le package `remotes`. Si vous n'avez pas encore installé `remotes`, commencez par le faire avec la commande `install.packages("remotes")`.

Ensuite, installez `olympicsWeather` en utilisant la commande suivante :

```{r}
#| eval: false

remotes::install_github("isabel6198/olympicsWeather")

```

## Fonctions

Les fonctions qui sont incluses dans le package sont :

-   **`perform_request`**: Envoie une requête à l'API Open-Meteo avec des coordonnées GPS et retourne les données météorologiques horaires sous forme de tibble.

-   **`unnest_data`**: Transforme les données météorologiques brutes en un tibble structuré, extrayant des informations telles que la date, l'heure, et les températures.

-   **`get_forecast`**: Fonction générique qui, selon le type d'entrée (adresse ou coordonnées GPS), renvoie des prévisions météorologiques sous forme de tibble.

-   **`address_to_gps`** et **`get_gps_coordinate`**: Convertissent une adresse textuelle en coordonnées GPS à l'aide du service de géocodage OpenStreetMap.

-   **`get_forecast.numeric`** et **`get_forecast.character`**: Spécialisent **`get_forecast`** pour traiter respectivement des coordonnées GPS numériques et des adresses textuelles, renvoyant les prévisions météorologiques pour l'emplacement spécifié.

-   **`visualiser_temperatures`**: Crée un graphique interactif avec **`plotly`** à partir d'un tibble météorologique, affichant la température et la température ressentie au fil du temps.

Chaque fonction est conçue pour simplifier l'accès et la manipulation des données météorologiques, depuis la récupération des informations depuis une API externe jusqu'à la visualisation interactive des prévisions.

## Exemples

### Site: le stade de France

```{r}
#| warning: false
# librairie 
library(olympicsWeather)


# Obtenir les prévisions météorologiques à partir d'un lieu exacte
meteo <- get_forecast("Stade de France, Saint-Denis, France")
meteo
# Visualer les données
graphique <- visualiser_temperatures(meteo)
graphique

```

### Coordonnées GPS

```{r}
#| warning: false

# Obtenir les prévisions météorologiques à partir de Coordonnées GPS 
gps <- c( 43.276703, 5.334791)

# Obtenir les prévisions météorologiques
meteo <- get_forecast(gps)
meteo
# Visualer les données
graphique <- visualiser_temperatures(meteo)
graphique

```

### Tahiti

```{r}
#| warning: false

# Obtenir les prévisions météorologiques 
meteo <- get_forecast("Tahiti")
# Visualer les données
graphique <- visualiser_temperatures(meteo)
graphique

```
